{"posts":[{"title":"样式测试","text":"主题1主题2主题3主题4主题5细细细细 粗体粗体粗体粗体粗体 细细细细细细 斜体斜体 删除删除删除删除删除 下划线下划线下划线下划线 引用引用引用引用 hangneidaima行内代码` 12345代码块代码块代码块代码块代码块代码块 无序列表 无序列表 无序列表 无序列表、 有序列表 有序列表 有序列表 有序列表 链接链接链接链接 @提及提及提及提及提及","link":"/2024/03/07/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/"},{"title":"Windows 万能下载器 Aira2 懒人配置：","text":"为什么选择 Aria2？ Aria2 下载功能比较全面，支持 BT 和磁力链接，性能也相当不错，速度不比迅雷慢。 虽然没有原生应用界面，配置也比较麻烦，但这些可以通过懒人包轻松解决。 最快速的懒人配置： 下载懒人包： LINK 将懒人包解压到 想要的文件夹，根据路径配置aria2.conf 官网下载 Aria2 程序LINK，然后解压到快速设置包的存放文件夹中，整体替代其中的 aria2相关程序和文件。 点击 Aria2c启动器.exeorAriaNg启动器.exe即可开始下载。两者都仅为前端界面，使用文件中的aria2.exe服务，可同时启动。包内均为开源绿色软件，不涉及任何隐私和安装，AutoHotkey 插件容易被误报。 Aria2c webui：https://aria2c.com/ AriaNg webui:file:///D:/Program/aria2/AriaNg/index.html#!/downloading 接管浏览器下载如果想用 Aria2 接管浏览器的下载管理，需安装插件/扩展。 Chrome：安装 添加到 aria2 扩展。下载包可以用 国内搬运地址，或是懒人包内置文件。如果浏览器无法直接安装 .crx 格式的扩展，可以将文件解压到新文件夹「xxx」，然后在浏览器的地址栏输入 chrome://extensions/ 开启开发者模式，点击加载已解压的扩展程序，选中刚才解压的文件夹「xxx」。 Firefox：安装 Aria2 Download Manager Integration 扩展，可参考下方的 Chrome 扩展设置进行配置。 安装完「添加到 aria2」扩展后，右键扩展图标，点击「选项」&gt;「设置」，设置如下： 最小监视：10 M，低于该容量将由浏览器下载。如果 Aria2 要接手所有下载，可以将最小监视设为 0.001。JSON-RPC 链接：http://localhost:6800/jsonrpc。注意：「添加到 aria2」图标显示的 en 表示处于开启状态，dis 表示处于关闭状态，点击图标可以切换使用状态。","link":"/2024/03/07/Aira2%20%E6%87%92%E4%BA%BA%E9%85%8D%E7%BD%AE/"},{"title":"c++ STL 库 （未完成）","text":"结构图 set（集合） 内部自动有序 不含重复元素 容器 1234567#include &lt;set&gt;set&lt;int&gt; name;set&lt;double&gt; name;set&lt;char&gt; name;set&lt;struct node&gt; name;set&lt;set&lt;int&gt; &gt; name;//注意：&gt; &gt;之间要加空格set&lt;int&gt; arr[10]; set容器内元素的访问set只能通过迭代器(iterator)访问(除了vector和string之外的STL容器都不支持*(it+i)的访问方式) ： 12set&lt;int&gt;::iterator it;set&lt;char&gt;::iterator it; 1234for (set&lt;int&gt;::iterator it = st.begin(); it != st.end(); it++){ cout &lt;&lt; *it &lt;&lt; endl;} 常用函数insert(value)1st.insert('C'); find(value)find(value)返回的是set中value所对应的迭代器，也就是value的指针（地址） 1cout &lt;&lt; *(st.find(2)) &lt;&lt; endl; erase(it)1st.erase(st.find(100)); //利用find()函数找到100,然后用erase删除它 erase(iteratorBegin , iteratorEnd)左闭右开 1st.erase(it, st.end()); size()1cout &lt;&lt; st.size() &lt;&lt; endl; vector（矢量） 变长数组 123456789#include &lt;vector&gt;vector&lt;int&gt; name;vector&lt;double&gt; name;vector&lt;char&gt; name;vector&lt;struct node&gt; name;vector&lt;vector&lt;int&gt; &gt; name;//注意：&gt; &gt;之间要加空格vector&lt;int&gt; array[SZIE]; //二维变长数组 二维数组中，它的一维形式就是地址。例如： 12int arr[3][2];//定义一个3行2列的地址cout&lt;&lt;arr[0]&lt;&lt;endl; //输出arr第1行的地址 output: 10x61fe00 //arr第1行的地址 vector容器内元素的访问（1）通过下标访问 1cout&lt;&lt;vi[0]&lt;&lt;endl; （2）通过迭代器访问 迭代器（iterator）可以理解为指针 123456789101112131415161718192021222324vector&lt;类型名&gt;::iterator 变量名;vector&lt;int&gt;::iterator it;vector&lt;double&gt;::iterator it; vector&lt;int&gt;::iterator it=v.begin(); for (int i = 0; i &lt; v.size(); i++) { cout&lt;&lt;it[i]&lt;&lt;&quot; &quot;; } vector&lt;int&gt;::iterator it=v.begin(); for (int i = 0; i &lt; v.size(); i++) { cout&lt;&lt;*(it+i)&lt;&lt;&quot; &quot;; } //vector的迭代器不支持it&lt;v.end()的写法，因此循环条件只能it!=v.end() for (vector&lt;int&gt;::iterator it=v.begin(); it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;&quot; &quot;; } vector常用函数实例解析（1）push_back(item)1v.push_back(i); （2）void pop_back()1v.push_back(i); （3）size()1cout&lt;&lt;v.size()&lt;&lt;endl; （4）clear()1v.clear(); （5）insert()123insert(__position,__x);v.insert(v.begin()+2,-1); //将-1插入v[2]的位置 （6）erase() 左闭右开12345erase(__position); //删除一个元素 v.erase(v.begin()+3);erase(__positionBegin,__positionEnd);//删除一个区间内的元素 v.erase(v.begin()+1,v.begin()+4);","link":"/2024/03/07/c++%20STL%20%E5%BA%93/"},{"title":"使用giscus为blog添加评论系统","text":"为了将GitHub讨论整合到你的博客，我们将使用 giscus。giscus是一个由GitHub讨论支持的评论系统。它可以让你把仓库中的讨论整合到你的博客中。 如何使用 GitHub 讨论作为聊天系统为了将GitHub讨论整合到你的博客，我们将使用 giscus。giscus是一个由GitHub讨论支持的评论系统。它可以让你把仓库中的讨论整合到你的博客中。 你的读者可以在你的博客上留下评论，这些评论会同时出现在你的博客和你的代码库的讨论页面上。 使用讨论区作为你的博客聊天系统的优势 它是完全免费的 没有广告或跟踪 它超级强大 你对评论有完全的控制权和完全的修改权。 有很多主题 它是相当可自定义的 你可以在你自己的服务器上自行托管 请记住，此工具主要适用于开发者博客，因为大多数开发人员使用 GitHub。 如何在你的博客中整合giscus先决条件 一个博客（你必须能够获得源代码） 一个 GitHub 帐户 你选择的代码库必须是公开的 首先，你需要为你的代码库启用讨论功能。 转到代码库 Settings-&gt; 在Features部分下 -&gt; 勾选Discussions框。接下来，在你的代码库中安装giscus应用程序。转到 giscus主页，按照提示操作，并仅授予对选定代码库的访问权限。现在是重要的部分：我们需要配置giscus小部件。 首先，进入giscus主页，滚动到Configuration部分。 选择您的小部件语言，这是您想要显示小部件的语言。然后输入你的代码库名称和你的用户名，如用 username/reponame。对于页面↔️讨论映射，我建议选择 “讨论标题包含页面 URL”。但根据你的需要，选择最适合你的那一个。接下来，在你的GitHub 代码库上的讨论页面创建一个类别——比如 “Comments（评论）”——或者选择现有的类别。然后根据需要启用可选功能。 接下来，选择主题。不要担心，你可以通过编程来切换不同的主题。 最后，复制并粘贴生成的代码。 Giscus将根据你的设置生成一个脚本标签，你可以将其粘贴到你的代码中。","link":"/2024/03/08/%E4%BD%BF%E7%94%A8giscus%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"title":"Verilog running in vscode","text":"尝试在vscode跑Verilog，记录一下。很久之前设置的，想到多少写多少吧： 一·添加的扩展：Verilog HDL：添加一个运行按钮，添加控制台输出（大概） Verilog Snippet：关键词高亮补全（大概） Verilog_Testbench：自动生成测试文件，用处不大。 Verilog-HDL/SystemVe：主要的，综合各个模块 WaveTrace：波形显示 二·部分设置：&quot;verilog.linting.linter&quot;: &quot;iverilog&quot; 三·报错：1.include 报错：`include “./my.v”找不到文件，使用相对绝对路径都不行：设置为：&quot;verilog.linting.iverilog.runAtFileLocation&quot;: true","link":"/2024/03/07/verilog-in-vscode/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/03/09/hello-world/"}],"tags":[],"categories":[],"pages":[]}