<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.danielniu.me/atom.xml" rel="self"/>
  
  <link href="http://blog.danielniu.me/"/>
  <updated>2024-03-10T06:00:49.721Z</updated>
  <id>http://blog.danielniu.me/</id>
  
  <author>
    <name>Daniel Niu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Icarus主题的一些常用配置</title>
    <link href="http://blog.danielniu.me/2024/03/10/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.danielniu.me/2024/03/10/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-10T05:44:43.000Z</published>
    <updated>2024-03-10T06:00:49.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常见的一些配置见_config.icarus.yml，英文不差都能看懂，或者去看icarus文档。本文主要就是一些网上很少的配置。</p></blockquote><span id="more"></span><p>Icarus: 4.0.0</p><h3 id="文章页面两栏布局"><a href="#文章页面两栏布局" class="headerlink" title="文章页面两栏布局"></a>文章页面两栏布局</h3><p>在 <code>_config.icarus.yml</code>目录下，创建 <code>_config.post.yml</code>文件，该文件内容与 <code>_config.icarus.yml</code>文件一样，用于单独加载post界面布局。注意，双栏需要将widgets内容的position都设置为同一边。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 单独文章界面布局</span><br><span class="line">widgets:</span><br><span class="line">    # 个人信息</span><br><span class="line">    -</span><br><span class="line">        position: left</span><br><span class="line">        type: profile</span><br><span class="line">        author: zhaommmmomo</span><br><span class="line">        author_title: fahaxiki!</span><br><span class="line">        location: Yantai,China</span><br><span class="line">        avatar: /img/logo.jpg</span><br><span class="line">        avatar_rounded: false</span><br><span class="line">        follow_link: &#x27;https://zhaommmmomo.cn&#x27;</span><br><span class="line">        social_links:</span><br><span class="line">            Github:</span><br><span class="line">                icon: fab fa-github</span><br><span class="line">                url: &#x27;https://github.com/zhaommmmomo&#x27;</span><br><span class="line">    # 文章目录</span><br><span class="line">    -</span><br><span class="line">        position: left</span><br><span class="line">        type: toc</span><br><span class="line">        # 目录序号</span><br><span class="line">        index: true</span><br><span class="line"># 侧边栏是否固定</span><br><span class="line">sidebar:</span><br><span class="line">    left:</span><br><span class="line">        sticky: false</span><br><span class="line">    right:</span><br><span class="line">        sticky: false</span><br></pre></td></tr></table></figure><h3 id="增加两栏布局下文章的宽度"><a href="#增加两栏布局下文章的宽度" class="headerlink" title="增加两栏布局下文章的宽度"></a>增加两栏布局下文章的宽度</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># layout/layout.<span class="property">jsx</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ......</span><br><span class="line">            &lt;<span class="title class_">Head</span> site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">        </span><br><span class="line">            # &lt;body <span class="keyword">class</span>=&#123;<span class="string">`is-<span class="subst">$&#123;columnCount&#125;</span>-column`</span>&#125;&gt;修改为下面一行</span><br><span class="line">            &lt;body <span class="keyword">class</span>=&#123;<span class="string">`is-3-column`</span>&#125;&gt;</span><br><span class="line">                ......</span><br><span class="line">                                # <span class="string">&#x27;is-8-tablet is-8-desktop is-8-widescreen&#x27;</span>: columnCount === <span class="number">2</span></span><br><span class="line">            # 修改为下面一行</span><br><span class="line">                                <span class="string">&#x27;is-8-tablet is-8-desktop is-9-widescreen&#x27;</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">                                <span class="string">&#x27;is-8-tablet is-8-desktop is-6-widescreen&#x27;</span>: columnCount === <span class="number">3</span></span><br><span class="line">                            &#125;)&#125; dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: body &#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># layout/common/widgets.<span class="property">jsx</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getColumnSizeClass</span>(<span class="params">columnCount</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (columnCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            # <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-4-widescreen&#x27;</span>;# 修改为下面一行</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只固定目录"><a href="#只固定目录" class="headerlink" title="只固定目录"></a>只固定目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># source/js/main.<span class="property">js</span></span><br><span class="line"><span class="keyword">const</span> $toc = $(<span class="string">&#x27;#toc&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ($toc.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $toc.<span class="title function_">addClass</span>(<span class="string">&#x27;column-left is-sticky&#x27;</span>);# 添加</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># include/style/widget<span class="selector-class">.styl</span> 添加下面</span><br><span class="line"><span class="selector-id">#toc</span></span><br><span class="line">    <span class="attribute">max-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">22px</span>)</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;常见的一些配置见_config.icarus.yml，英文不差都能看懂，或者去看icarus文档。本文主要就是一些网上很少的配置。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="icarus" scheme="http://blog.danielniu.me/tags/icarus/"/>
    
  </entry>
  
  <entry>
    <title>使用dithub codespace + github page + hexo 无服务器发布运行个人博客</title>
    <link href="http://blog.danielniu.me/2024/03/09/%E4%BD%BF%E7%94%A8github-codespace-github-page-hexo-%E7%BA%BF%E4%B8%8A%E7%BC%96%E8%BE%91%E5%8F%91%E5%B8%83%E8%BF%90%E8%A1%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.danielniu.me/2024/03/09/%E4%BD%BF%E7%94%A8github-codespace-github-page-hexo-%E7%BA%BF%E4%B8%8A%E7%BC%96%E8%BE%91%E5%8F%91%E5%B8%83%E8%BF%90%E8%A1%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-03-09T03:14:43.000Z</published>
    <updated>2024-03-10T05:57:21.581Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo是一个可以github page 托管的静态页面博客框架，需要node.js进行编译发布，鉴于windows配置node.js的不变性，使用github codespace托管运行环境以及博客源码，进行无服务器博客运营。</p></blockquote><span id="more"></span><p>icarus 主题 整体颜色改变：<br>&#x2F;node_modules&#x2F;hexo-theme-icarus&#x2F;include&#x2F;style&#x2F;base.styl<br>l15 $primary ?&#x3D; hsl(30, 100%,  50%)</p><p><a href="http://zhaommmmomo.cn/2021/09/14/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/">更改两栏布局下文章宽度</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;hexo是一个可以github page 托管的静态页面博客框架，需要node.js进行编译发布，鉴于windows配置node.js的不变性，使用github codespace托管运行环境以及博客源码，进行无服务器博客运营。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Icarus" scheme="http://blog.danielniu.me/tags/Icarus/"/>
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="codespace" scheme="http://blog.danielniu.me/tags/codespace/"/>
    
    <category term="hexo" scheme="http://blog.danielniu.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用giscus为blog添加评论系统</title>
    <link href="http://blog.danielniu.me/2024/03/08/%E4%BD%BF%E7%94%A8giscus%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://blog.danielniu.me/2024/03/08/%E4%BD%BF%E7%94%A8giscus%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-03-08T09:26:42.000Z</published>
    <updated>2024-03-10T06:00:10.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>giscus指一个非常好用的由GitHub讨论支持的评论系统，它可以让你把仓库中的讨论整合到你的博客中。</p></blockquote><span id="more"></span><h2 id="如何使用-GitHub-讨论作为聊天系统"><a href="#如何使用-GitHub-讨论作为聊天系统" class="headerlink" title="如何使用 GitHub 讨论作为聊天系统"></a>如何使用 GitHub 讨论作为聊天系统</h2><p>为了将GitHub讨论整合到你的博客，我们将使用 giscus。<br><img src="https://picstorage.danielniu.me/imgs/03e29360d5cc429ca6d7d4062f2c5f83.png" alt="img"><br>giscus是一个由GitHub讨论支持的评论系统。它可以让你把仓库中的讨论整合到你的博客中。</p><p>你的读者可以在你的博客上留下评论，这些评论会同时出现在你的博客和你的代码库的讨论页面上。</p><h3 id="使用讨论区作为你的博客聊天系统的优势"><a href="#使用讨论区作为你的博客聊天系统的优势" class="headerlink" title="使用讨论区作为你的博客聊天系统的优势"></a>使用讨论区作为你的博客聊天系统的优势</h3><ul><li>它是完全免费的</li><li>没有广告或跟踪</li><li>它超级强大</li><li>你对评论有完全的控制权和完全的修改权。</li><li>有很多主题</li><li>它是相当可自定义的</li><li>你可以在你自己的服务器上自行托管</li></ul><p>请记住，此工具主要适用于开发者博客，因为大多数开发人员使用 GitHub。</p><h3 id="如何在你的博客中整合giscus"><a href="#如何在你的博客中整合giscus" class="headerlink" title="如何在你的博客中整合giscus"></a>如何在你的博客中整合giscus</h3><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><ul><li>一个博客（你必须能够获得源代码）</li><li>一个 GitHub 帐户</li><li>你选择的代码库必须是公开的</li></ul><p>首先，你需要为你的代码库启用讨论功能。</p><p>转到代码库 <code>Settings</code>-&gt; 在 <code>Features</code>部分下 -&gt; 勾选 <code>Discussions</code>框。<br><img src="https://picstorage.danielniu.me/imgs/8b8814e3fa45476fb4d6568951fbdc40.png" alt="img"><br>接下来，在你的代码库中安装giscus应用程序。<br>转到 <a href="https://github.com/apps/giscus">giscus主页</a>，按照提示操作，并仅授予对选定代码库的访问权限。<img src="https://picstorage.danielniu.me/imgs/f15fd586e4cd4f4b82dc7db826d12a48.png" alt="img"><br>现在是重要的部分：我们需要配置giscus小部件。</p><p>首先，进入giscus主页，滚动到 <code>Configuration</code>部分。</p><p>选择您的小部件语言，这是您想要显示小部件的语言。<br><img src="https://picstorage.danielniu.me/imgs/3b9ff0ea2bef46558b9d364bb0642af5.png" alt="img"><br>然后输入你的代码库名称和你的用户名，如用 <code>username/reponame</code>。<img src="https://picstorage.danielniu.me/imgs/4d4469acb1634b51a6b4633ec5454206.png"><br>对于页面↔️讨论映射，我建议选择 “讨论标题包含页面 <code>URL</code>”。但根据你的需要，选择最适合你的那一个。<br><img src="https://picstorage.danielniu.me/imgs/cc13493061bd436b94e79b63e4279b6a.png"><br>接下来，在你的GitHub 代码库上的讨论页面创建一个类别——比如 “Comments（评论）”——或者选择现有的类别。<br><img src="https://picstorage.danielniu.me/imgs/92d114d08dfb4e9b9594b17bb95d9702.png"><br><img src="https://picstorage.danielniu.me/imgs/8797a751ea66497da47e68e1260c4b1a.png">然后根据需要启用可选功能。</p><p>接下来，选择主题。不要担心，你可以通过编程来切换不同的主题。</p><p>最后，复制并粘贴生成的代码。</p><p>Giscus将根据你的设置生成一个脚本标签，你可以将其粘贴到你的代码中。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;giscus指一个非常好用的由GitHub讨论支持的评论系统，它可以让你把仓库中的讨论整合到你的博客中。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Icarus" scheme="http://blog.danielniu.me/tags/Icarus/"/>
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="hexo" scheme="http://blog.danielniu.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>样式测试</title>
    <link href="http://blog.danielniu.me/2024/03/07/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://blog.danielniu.me/2024/03/07/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-07T20:39:32.000Z</published>
    <updated>2024-03-10T06:00:41.205Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个简单的样式测试页面</p></blockquote><span id="more"></span><h2 id="主题1"><a href="#主题1" class="headerlink" title="主题1"></a>主题1</h2><h3 id="主题2"><a href="#主题2" class="headerlink" title="主题2"></a>主题2</h3><h4 id="主题3"><a href="#主题3" class="headerlink" title="主题3"></a>主题3</h4><h5 id="主题4"><a href="#主题4" class="headerlink" title="主题4"></a>主题4</h5><h6 id="主题5"><a href="#主题5" class="headerlink" title="主题5"></a>主题5</h6><p>细细细细 <strong>粗体粗体粗体粗体粗体</strong> 细细细细细细</p><p><em>斜体斜体</em></p><p><del>删除删除删除删除删除</del></p><p><u>下划线下划线下划线下划线</u></p><blockquote><p>引用引用引用引用</p></blockquote><p>hangneidaima行内代码&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码块代码块代码块</span><br><span class="line"></span><br><span class="line">代码块代码块</span><br><span class="line"></span><br><span class="line">代码块</span><br></pre></td></tr></table></figure><ul><li><p>无序列表</p></li><li><p>无序列表</p></li><li><p>无序列表</p></li><li><p>无序列表、</p><ol><li><p>有序列表</p></li><li><p>有序列表</p></li><li><p>有序列表</p></li><li><p>有序列表</p><p><a href="">链接链接链接链接</a></p><p>@提及提及提及提及提及</p></li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一个简单的样式测试页面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="markdown" scheme="http://blog.danielniu.me/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Verilog running in vscode</title>
    <link href="http://blog.danielniu.me/2024/03/07/verilog-in-vscode/"/>
    <id>http://blog.danielniu.me/2024/03/07/verilog-in-vscode/</id>
    <published>2024-03-07T20:34:39.000Z</published>
    <updated>2024-03-10T06:00:46.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>尝试在vscode跑Verilog，记录一下。<br>很久之前设置的，想到多少写多少吧：</p></blockquote><span id="more"></span><h2 id="一·添加的扩展："><a href="#一·添加的扩展：" class="headerlink" title="一·添加的扩展："></a>一·添加的扩展：</h2><p><img src="https://picstorage.danielniu.me/imgs/bafkreifgtz7lwnpkumdxikltrrfhdwjyrxrjnflovh3k2d7ark62i5r43y.png" alt="image"><br>Verilog HDL：添加一个运行按钮，添加控制台输出（大概）</p><p>Verilog Snippet：关键词高亮补全（大概）</p><p>Verilog_Testbench：自动生成测试文件，用处不大。</p><p>Verilog-HDL&#x2F;SystemVe：主要的，综合各个模块</p><p><img src="https://picstorage.danielniu.me/imgs/bafkreidt2dhxhqj4ilximdpergiswfm6lo4nebos6xwdtw5gvkqatvj2ea.png" alt="image"></p><p>WaveTrace：波形显示</p><h2 id="二·部分设置："><a href="#二·部分设置：" class="headerlink" title="二·部分设置："></a>二·部分设置：</h2><p><code>&quot;verilog.linting.linter&quot;: &quot;iverilog&quot;</code></p><p><img src="https://picstorage.danielniu.me/imgs/bafkreiax4bffeap77a4xrwtvlgycfrktw346uxvuc44xcjrf7womhqqboi.png" alt="image"></p><h2 id="三·报错："><a href="#三·报错：" class="headerlink" title="三·报错："></a>三·报错：</h2><p>1.include 报错：<br>`include “.&#x2F;my.v”找不到文件，使用相对绝对路径都不行：设置为：<br><code>&quot;verilog.linting.iverilog.runAtFileLocation&quot;: true</code><br><img src="https://picstorage.danielniu.me/imgs/bafkreia36fe5f3wrka2dctmhyzffrtlu7o4ormvjqmeqeavrn27q27pvr4.png" alt="1"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;尝试在vscode跑Verilog，记录一下。&lt;br&gt;很久之前设置的，想到多少写多少吧：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="verilog" scheme="http://blog.danielniu.me/tags/verilog/"/>
    
    <category term="vscode" scheme="http://blog.danielniu.me/tags/vscode/"/>
    
    <category term="环境配置" scheme="http://blog.danielniu.me/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>c++ STL 库 （未完成）</title>
    <link href="http://blog.danielniu.me/2024/03/07/c++%20STL%20%E5%BA%93/"/>
    <id>http://blog.danielniu.me/2024/03/07/c++%20STL%20%E5%BA%93/</id>
    <published>2024-03-07T19:56:48.000Z</published>
    <updated>2024-03-10T05:59:55.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>c++ STL 库包含基本的图，列表，栈等数据结构以及基本操作，方便使用。</p></blockquote><span id="more"></span><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://picstorage.danielniu.me/imgs/2.png" alt="结构图"></p><h2 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h2><blockquote><p><strong>内部自动有序 不含重复元素</strong> <strong>容器</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; name;</span><br><span class="line">set&lt;<span class="type">double</span>&gt; name;</span><br><span class="line">set&lt;<span class="type">char</span>&gt; name;</span><br><span class="line">set&lt;<span class="keyword">struct</span> node&gt; name;</span><br><span class="line">set&lt;set&lt;<span class="type">int</span>&gt; &gt; name;<span class="comment">//注意：&gt; &gt;之间要加空格</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; arr[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="set容器内元素的访问"><a href="#set容器内元素的访问" class="headerlink" title="set容器内元素的访问"></a>set容器内元素的访问</h3><p><strong>set只能通过迭代器(iterator)访问(除了vector和string之外的STL容器都不支持*(it+i)的访问方式)</strong> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">set&lt;<span class="type">char</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="insert-value"><a href="#insert-value" class="headerlink" title="insert(value)"></a>insert(value)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">insert</span>(<span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="find-value"><a href="#find-value" class="headerlink" title="find(value)"></a>find(value)</h4><p><strong>find(value)返回的是set中value所对应的迭代器，也就是value的指针（地址）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; *(st.<span class="built_in">find</span>(<span class="number">2</span>)) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="erase-it"><a href="#erase-it" class="headerlink" title="erase(it)"></a><strong>erase(it)</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(<span class="number">100</span>)); <span class="comment">//利用find()函数找到100,然后用erase删除它</span></span><br></pre></td></tr></table></figure><h4 id="erase-iteratorBegin-iteratorEnd"><a href="#erase-iteratorBegin-iteratorEnd" class="headerlink" title="erase(iteratorBegin , iteratorEnd)"></a><strong>erase(iteratorBegin , iteratorEnd)</strong></h4><p><strong>左闭右开</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">erase</span>(it, st.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h4 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; st.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="vector（矢量）"><a href="#vector（矢量）" class="headerlink" title="vector（矢量）"></a>vector（矢量）</h2><blockquote><p><strong>变长数组</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; name;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt; name;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; name;</span><br><span class="line">vector&lt;<span class="keyword">struct</span> node&gt; name;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; name;<span class="comment">//注意：&gt; &gt;之间要加空格</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; array[SZIE]; <span class="comment">//二维变长数组</span></span><br></pre></td></tr></table></figure><p><strong>二维数组中，它的一维形式就是地址。例如：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//定义一个3行2列的地址</span></span><br><span class="line">cout&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;endl; <span class="comment">//输出arr第1行的地址</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x61fe00</span> <span class="comment">//arr第1行的地址</span></span><br></pre></td></tr></table></figure><h3 id="vector容器内元素的访问"><a href="#vector容器内元素的访问" class="headerlink" title="vector容器内元素的访问"></a>vector容器内元素的访问</h3><p><strong>（1）通过下标访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;vi[<span class="number">0</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><strong>（2）通过迭代器访问</strong></p><blockquote><p>迭代器（iterator）可以理解为指针</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;类型名&gt;::iterator 变量名;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;it[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;*(it+i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vector的迭代器不支持it&lt;v.end()的写法，因此循环条件只能it!=v.end()</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vector常用函数实例解析"><a href="#vector常用函数实例解析" class="headerlink" title="vector常用函数实例解析"></a>vector常用函数实例解析</h3><h4 id="（1）push-back-item"><a href="#（1）push-back-item" class="headerlink" title="（1）push_back(item)"></a><strong>（1）push_back(item)</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure><h4 id="（2）void-pop-back"><a href="#（2）void-pop-back" class="headerlink" title="（2）void pop_back()"></a><strong>（2）void pop_back()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure><h4 id="（3）size"><a href="#（3）size" class="headerlink" title="（3）size()"></a><strong>（3）size()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h4 id="（4）clear"><a href="#（4）clear" class="headerlink" title="（4）clear()"></a><strong>（4）clear()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h4 id="（5）insert"><a href="#（5）insert" class="headerlink" title="（5）insert()"></a><strong>（5）insert()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(__position,__x);</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>()+<span class="number">2</span>,<span class="number">-1</span>); <span class="comment">//将-1插入v[2]的位置</span></span><br></pre></td></tr></table></figure><h4 id="（6）erase-左闭右开"><a href="#（6）erase-左闭右开" class="headerlink" title="（6）erase()    左闭右开"></a><strong>（6）erase()    左闭右开</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">erase</span>(__position); <span class="comment">//删除一个元素</span></span><br><span class="line">   v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">erase</span>(__positionBegin,__positionEnd);<span class="comment">//删除一个区间内的元素</span></span><br><span class="line">    v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()+<span class="number">1</span>,v.<span class="built_in">begin</span>()+<span class="number">4</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;c++ STL 库包含基本的图，列表，栈等数据结构以及基本操作，方便使用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="http://blog.danielniu.me/tags/cpp/"/>
    
    <category term="stl" scheme="http://blog.danielniu.me/tags/stl/"/>
    
    <category term="algorithm" scheme="http://blog.danielniu.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Windows 万能下载器 Aira2 懒人配置：</title>
    <link href="http://blog.danielniu.me/2024/03/07/Aira2%20%E6%87%92%E4%BA%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.danielniu.me/2024/03/07/Aira2%20%E6%87%92%E4%BA%BA%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-07T19:39:12.000Z</published>
    <updated>2024-03-10T06:00:23.333Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Aria2 是一个命令行全功能下载器，同时支持磁力下载，没有原生界面但是可以使用aira2c以及airaNG的web界面</p></blockquote><span id="more"></span><h1 id="为什么选择-Aria2？"><a href="#为什么选择-Aria2？" class="headerlink" title="为什么选择 Aria2？"></a>为什么选择 Aria2？</h1><p>  Aria2 下载功能比较全面，支持 BT 和磁力链接，性能也相当不错，速度不比迅雷慢。</p><p>虽然没有原生应用界面，配置也比较麻烦，但这些可以通过懒人包轻松解决。</p><h1 id="最快速的懒人配置："><a href="#最快速的懒人配置：" class="headerlink" title="最快速的懒人配置："></a>最快速的懒人配置：</h1><ol><li>下载懒人包： <a href="https://link.zhihu.com/?target=https://www.seoipo.com/software/Aria2/">LINK</a></li><li>将懒人包解压到 想要的文件夹，根据路径配置aria2.conf</li><li>官网下载 Aria2 程序<a href="https://github.com/aria2/aria2/releases">LINK</a>，然后解压到快速设置包的存放文件夹中，整体替代其中的 aria2相关程序和文件。</li><li>点击 <code>Aria2c启动器.exe</code>or<code>AriaNg启动器.exe</code>即可开始下载。两者都仅为前端界面，使用文件中的aria2.exe服务，可同时启动。包内均为开源绿色软件，不涉及任何隐私和安装，AutoHotkey 插件容易被误报。</li></ol><p>Aria2c webui：<code>https://aria2c.com/</code></p><p>AriaNg webui:<code>file:///D:/Program/aria2/AriaNg/index.html#!/downloading</code></p><h1 id="接管浏览器下载"><a href="#接管浏览器下载" class="headerlink" title="接管浏览器下载"></a>接管浏览器下载</h1><p>如果想用 Aria2 接管浏览器的下载管理，需安装插件&#x2F;扩展。</p><h2 id="Chrome："><a href="#Chrome：" class="headerlink" title="Chrome："></a>Chrome：</h2><p>安装 添加到 aria2 扩展。下载包可以用 国内搬运地址，或是懒人包内置文件。<br>如果浏览器无法直接安装 .crx 格式的扩展，可以将文件解压到新文件夹「xxx」，然后在浏览器的地址栏输入 chrome:&#x2F;&#x2F;extensions&#x2F; 开启开发者模式，点击加载已解压的扩展程序，选中刚才解压的文件夹「xxx」。</p><h2 id="Firefox："><a href="#Firefox：" class="headerlink" title="Firefox："></a>Firefox：</h2><p>安装 Aria2 Download Manager Integration 扩展，可参考下方的 Chrome 扩展设置进行配置。</p><p>安装完「添加到 aria2」扩展后，右键扩展图标，点击「选项」&gt;「设置」，设置如下：</p><p>最小监视：10 M，低于该容量将由浏览器下载。如果 Aria2 要接手所有下载，可以将最小监视设为 0.001。<br>JSON-RPC 链接：<a href="http://localhost:6800/jsonrpc%E3%80%82">http://localhost:6800/jsonrpc。</a><br>注意：「添加到 aria2」图标显示的 en 表示处于开启状态，dis 表示处于关闭状态，点击图标可以切换使用状态。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Aria2 是一个命令行全功能下载器，同时支持磁力下载，没有原生界面但是可以使用aira2c以及airaNG的web界面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="S[aira2]" scheme="http://blog.danielniu.me/tags/S-aira2/"/>
    
  </entry>
  
</feed>
