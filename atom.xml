<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.danielniu.me/atom.xml" rel="self"/>
  
  <link href="http://blog.danielniu.me/"/>
  <updated>2024-03-11T11:51:58.630Z</updated>
  <id>http://blog.danielniu.me/</id>
  
  <author>
    <name>Daniel Niu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大学生创新创业大赛筹备</title>
    <link href="http://blog.danielniu.me/2024/03/11/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E7%AD%B9%E5%A4%87/"/>
    <id>http://blog.danielniu.me/2024/03/11/%E5%A4%A7%E5%AD%A6%E7%94%9F%E5%88%9B%E6%96%B0%E5%88%9B%E4%B8%9A%E5%A4%A7%E8%B5%9B%E7%AD%B9%E5%A4%87/</id>
    <published>2024-03-11T11:12:13.000Z</published>
    <updated>2024-03-11T11:51:58.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>备忘录，筹备答辩24&#x2F;03&#x2F;11</p></blockquote><span id="more"></span><p>答辩视频：<br><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">  <iframe src="//player.bilibili.com/player.html?aid=812103093&cid=[object Promise]&page=1" scrolling="no" border="0" frameborder="no"  framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe></div>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;备忘录，筹备答辩24&amp;#x2F;03&amp;#x2F;11&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Icarus主题的一些常用配置</title>
    <link href="http://blog.danielniu.me/2024/03/10/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.danielniu.me/2024/03/10/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-10T05:44:43.000Z</published>
    <updated>2024-03-11T08:55:07.738Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>常见的一些配置见_config.icarus.yml，英文不差都能看懂，或者去看icarus文档。本文主要就是一些网上很少的配置。</p></blockquote><span id="more"></span><p>Icarus: 4.0.0</p><h3 id="文章页面两栏布局"><a href="#文章页面两栏布局" class="headerlink" title="文章页面两栏布局"></a>文章页面两栏布局</h3><p>在 <code>_config.icarus.yml</code>目录下，创建 <code>_config.post.yml</code>文件，该文件内容与 <code>_config.icarus.yml</code>文件一样，用于单独加载post界面布局。注意，双栏需要将widgets内容的position都设置为同一边。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 单独文章界面布局</span><br><span class="line">widgets:</span><br><span class="line">    # 个人信息</span><br><span class="line">    -</span><br><span class="line">        position: left</span><br><span class="line">        type: profile</span><br><span class="line">        author: zhaommmmomo</span><br><span class="line">        author_title: fahaxiki!</span><br><span class="line">        location: Yantai,China</span><br><span class="line">        avatar: /img/logo.jpg</span><br><span class="line">        avatar_rounded: false</span><br><span class="line">        follow_link: &#x27;https://zhaommmmomo.cn&#x27;</span><br><span class="line">        social_links:</span><br><span class="line">            Github:</span><br><span class="line">                icon: fab fa-github</span><br><span class="line">                url: &#x27;https://github.com/zhaommmmomo&#x27;</span><br><span class="line">    # 文章目录</span><br><span class="line">    -</span><br><span class="line">        position: left</span><br><span class="line">        type: toc</span><br><span class="line">        # 目录序号</span><br><span class="line">        index: true</span><br><span class="line"># 侧边栏是否固定</span><br><span class="line">sidebar:</span><br><span class="line">    left:</span><br><span class="line">        sticky: false</span><br><span class="line">    right:</span><br><span class="line">        sticky: false</span><br></pre></td></tr></table></figure><h3 id="增加两栏布局下文章的宽度"><a href="#增加两栏布局下文章的宽度" class="headerlink" title="增加两栏布局下文章的宽度"></a>增加两栏布局下文章的宽度</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># layout/layout.<span class="property">jsx</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ......</span><br><span class="line">            &lt;<span class="title class_">Head</span> site=&#123;site&#125; config=&#123;config&#125; helper=&#123;helper&#125; page=&#123;page&#125; /&gt;</span><br><span class="line">        </span><br><span class="line">            # &lt;body <span class="keyword">class</span>=&#123;<span class="string">`is-<span class="subst">$&#123;columnCount&#125;</span>-column`</span>&#125;&gt;修改为下面一行</span><br><span class="line">            &lt;body <span class="keyword">class</span>=&#123;<span class="string">`is-3-column`</span>&#125;&gt;</span><br><span class="line">                ......</span><br><span class="line">                                # <span class="string">&#x27;is-8-tablet is-8-desktop is-8-widescreen&#x27;</span>: columnCount === <span class="number">2</span></span><br><span class="line">            # 修改为下面一行</span><br><span class="line">                                <span class="string">&#x27;is-8-tablet is-8-desktop is-9-widescreen&#x27;</span>: columnCount === <span class="number">2</span>,</span><br><span class="line">                                <span class="string">&#x27;is-8-tablet is-8-desktop is-6-widescreen&#x27;</span>: columnCount === <span class="number">3</span></span><br><span class="line">                            &#125;)&#125; dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: body &#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># layout/common/widgets.<span class="property">jsx</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getColumnSizeClass</span>(<span class="params">columnCount</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (columnCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            # <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-4-widescreen&#x27;</span>;# 修改为下面一行</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;is-4-tablet is-4-desktop is-3-widescreen&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只固定目录"><a href="#只固定目录" class="headerlink" title="只固定目录"></a>只固定目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># source/js/main.<span class="property">js</span></span><br><span class="line"><span class="keyword">const</span> $toc = $(<span class="string">&#x27;#toc&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> ($toc.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $toc.<span class="title function_">addClass</span>(<span class="string">&#x27;column-left is-sticky&#x27;</span>);# 添加</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># include/style/widget<span class="selector-class">.styl</span> 添加下面</span><br><span class="line"><span class="selector-id">#toc</span></span><br><span class="line">    <span class="attribute">max-height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - <span class="number">22px</span>)</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;常见的一些配置见_config.icarus.yml，英文不差都能看懂，或者去看icarus文档。本文主要就是一些网上很少的配置。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="icarus" scheme="http://blog.danielniu.me/tags/icarus/"/>
    
  </entry>
  
  <entry>
    <title>使用github codespace + github page + hexo 无服务器发布运行个人博客</title>
    <link href="http://blog.danielniu.me/2024/03/09/%E4%BD%BF%E7%94%A8github-codespace-github-page-hexo-%E7%BA%BF%E4%B8%8A%E7%BC%96%E8%BE%91%E5%8F%91%E5%B8%83%E8%BF%90%E8%A1%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.danielniu.me/2024/03/09/%E4%BD%BF%E7%94%A8github-codespace-github-page-hexo-%E7%BA%BF%E4%B8%8A%E7%BC%96%E8%BE%91%E5%8F%91%E5%B8%83%E8%BF%90%E8%A1%8C%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2024-03-09T03:14:43.000Z</published>
    <updated>2024-03-11T08:58:10.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo是一个可以github page 托管的静态页面博客框架，需要node.js进行编译发布，鉴于windows配置node.js的不变性，使用github codespace托管运行环境以及博客源码，进行无服务器博客运营。</p></blockquote><span id="more"></span><p>icarus 主题 整体颜色改变：<br>&#x2F;node_modules&#x2F;hexo-theme-icarus&#x2F;include&#x2F;style&#x2F;base.styl<br>l15 $primary ?&#x3D; hsl(30, 100%,  50%)</p><p><a href="http://zhaommmmomo.cn/2021/09/14/Icarus%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/">更改两栏布局下文章宽度</a></p><p><a href="https://hujiahao6.gitee.io/2020/04/02/hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/">部分更改</a></p><p>调整背景透明度<br>themes\icarus\source\js\animation.js<br>L44</p><p><a href="https://blog.mchook.cn/2021/07/22/icarus%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/">https://blog.mchook.cn/2021/07/22/icarus%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/</a></p><p>我使用的布局：.is-3-colum</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;hexo是一个可以github page 托管的静态页面博客框架，需要node.js进行编译发布，鉴于windows配置node.js的不变性，使用github codespace托管运行环境以及博客源码，进行无服务器博客运营。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Icarus" scheme="http://blog.danielniu.me/tags/Icarus/"/>
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="codespace" scheme="http://blog.danielniu.me/tags/codespace/"/>
    
    <category term="hexo" scheme="http://blog.danielniu.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用giscus为blog添加评论系统</title>
    <link href="http://blog.danielniu.me/2024/03/08/%E4%BD%BF%E7%94%A8giscus%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://blog.danielniu.me/2024/03/08/%E4%BD%BF%E7%94%A8giscus%E4%B8%BAblog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-03-08T09:26:42.000Z</published>
    <updated>2024-03-11T08:55:37.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>giscus指一个非常好用的由GitHub讨论支持的评论系统，它可以让你把仓库中的讨论整合到你的博客中。</p></blockquote><span id="more"></span><h2 id="如何使用-GitHub-讨论作为聊天系统"><a href="#如何使用-GitHub-讨论作为聊天系统" class="headerlink" title="如何使用 GitHub 讨论作为聊天系统"></a>如何使用 GitHub 讨论作为聊天系统</h2><p>为了将GitHub讨论整合到你的博客，我们将使用 giscus。<br><img src="https://picstorage.danielniu.me/imgs/03e29360d5cc429ca6d7d4062f2c5f83.png" alt="img"><br>giscus是一个由GitHub讨论支持的评论系统。它可以让你把仓库中的讨论整合到你的博客中。</p><p>你的读者可以在你的博客上留下评论，这些评论会同时出现在你的博客和你的代码库的讨论页面上。</p><h3 id="使用讨论区作为你的博客聊天系统的优势"><a href="#使用讨论区作为你的博客聊天系统的优势" class="headerlink" title="使用讨论区作为你的博客聊天系统的优势"></a>使用讨论区作为你的博客聊天系统的优势</h3><ul><li>它是完全免费的</li><li>没有广告或跟踪</li><li>它超级强大</li><li>你对评论有完全的控制权和完全的修改权。</li><li>有很多主题</li><li>它是相当可自定义的</li><li>你可以在你自己的服务器上自行托管</li></ul><p>请记住，此工具主要适用于开发者博客，因为大多数开发人员使用 GitHub。</p><h3 id="如何在你的博客中整合giscus"><a href="#如何在你的博客中整合giscus" class="headerlink" title="如何在你的博客中整合giscus"></a>如何在你的博客中整合giscus</h3><h4 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h4><ul><li>一个博客（你必须能够获得源代码）</li><li>一个 GitHub 帐户</li><li>你选择的代码库必须是公开的</li></ul><p>首先，你需要为你的代码库启用讨论功能。</p><p>转到代码库 <code>Settings</code>-&gt; 在 <code>Features</code>部分下 -&gt; 勾选 <code>Discussions</code>框。<br><img src="https://picstorage.danielniu.me/imgs/8b8814e3fa45476fb4d6568951fbdc40.png" alt="img"><br>接下来，在你的代码库中安装giscus应用程序。<br>转到 <a href="https://github.com/apps/giscus">giscus主页</a>，按照提示操作，并仅授予对选定代码库的访问权限。<img src="https://picstorage.danielniu.me/imgs/f15fd586e4cd4f4b82dc7db826d12a48.png" alt="img"><br>现在是重要的部分：我们需要配置giscus小部件。</p><p>首先，进入giscus主页，滚动到 <code>Configuration</code>部分。</p><p>选择您的小部件语言，这是您想要显示小部件的语言。<br><img src="https://picstorage.danielniu.me/imgs/3b9ff0ea2bef46558b9d364bb0642af5.png" alt="img"><br>然后输入你的代码库名称和你的用户名，如用 <code>username/reponame</code>。<img src="https://picstorage.danielniu.me/imgs/4d4469acb1634b51a6b4633ec5454206.png"><br>对于页面↔️讨论映射，我建议选择 “讨论标题包含页面 <code>URL</code>”。但根据你的需要，选择最适合你的那一个。<br><img src="https://picstorage.danielniu.me/imgs/cc13493061bd436b94e79b63e4279b6a.png"><br>接下来，在你的GitHub 代码库上的讨论页面创建一个类别——比如 “Comments（评论）”——或者选择现有的类别。<br><img src="https://picstorage.danielniu.me/imgs/92d114d08dfb4e9b9594b17bb95d9702.png"><br><img src="https://picstorage.danielniu.me/imgs/8797a751ea66497da47e68e1260c4b1a.png">然后根据需要启用可选功能。</p><p>接下来，选择主题。不要担心，你可以通过编程来切换不同的主题。</p><p>最后，复制并粘贴生成的代码。</p><p>Giscus将根据你的设置生成一个脚本标签，你可以将其粘贴到你的代码中。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;giscus指一个非常好用的由GitHub讨论支持的评论系统，它可以让你把仓库中的讨论整合到你的博客中。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Icarus" scheme="http://blog.danielniu.me/tags/Icarus/"/>
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="hexo" scheme="http://blog.danielniu.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>样式测试</title>
    <link href="http://blog.danielniu.me/2024/03/07/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/"/>
    <id>http://blog.danielniu.me/2024/03/07/%E6%A0%B7%E5%BC%8F%E6%B5%8B%E8%AF%95/</id>
    <published>2024-03-07T20:39:32.000Z</published>
    <updated>2024-03-11T08:56:00.998Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一个简单的样式测试页面</p></blockquote><span id="more"></span><h2 id="主题1"><a href="#主题1" class="headerlink" title="主题1"></a>主题1</h2><h3 id="主题2"><a href="#主题2" class="headerlink" title="主题2"></a>主题2</h3><h4 id="主题3"><a href="#主题3" class="headerlink" title="主题3"></a>主题3</h4><h5 id="主题4"><a href="#主题4" class="headerlink" title="主题4"></a>主题4</h5><h6 id="主题5"><a href="#主题5" class="headerlink" title="主题5"></a>主题5</h6><p>细细细细 <strong>粗体粗体粗体粗体粗体</strong> 细细细细细细</p><p><em>斜体斜体</em></p><p><del>删除删除删除删除删除</del></p><p><u>下划线下划线下划线下划线</u></p><blockquote><p>引用引用引用引用</p></blockquote><p>hangneidaima行内代码&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码块代码块代码块</span><br><span class="line"></span><br><span class="line">代码块代码块</span><br><span class="line"></span><br><span class="line">代码块</span><br></pre></td></tr></table></figure><ul><li><p>无序列表</p></li><li><p>无序列表</p></li><li><p>无序列表</p></li><li><p>无序列表、</p><ol><li><p>有序列表</p></li><li><p>有序列表</p></li><li><p>有序列表</p></li><li><p>有序列表</p><p><a href="">链接链接链接链接</a></p><p>@提及提及提及提及提及</p></li></ol></li></ul><div class="justified-gallery"><p><img src="https://picstorage.danielniu.me/imgs/bafybeigqhq6nqzl6muoi7qe4obmknjlkqkhneell6xniiezvujvilhglzm.png"><br><img src="https://picstorage.danielniu.me/imgs/2.png"><br><img src="https://picstorage.danielniu.me/imgs/bafkreifgtz7lwnpkumdxikltrrfhdwjyrxrjnflovh3k2d7ark62i5r43y.png"><br><img src="https://picstorage.danielniu.me/imgs/bafkreidt2dhxhqj4ilximdpergiswfm6lo4nebos6xwdtw5gvkqatvj2ea.png"><br><img src="https://picstorage.danielniu.me/imgs/bafkreiax4bffeap77a4xrwtvlgycfrktw346uxvuc44xcjrf7womhqqboi.png"><br><img src="https://picstorage.danielniu.me/imgs/bafkreia36fe5f3wrka2dctmhyzffrtlu7o4ormvjqmeqeavrn27q27pvr4.png"><br><img src="https://picstorage.danielniu.me/imgs/bafybeie4u27xkjevbhinsomst272dcmanxs27liybijtpesh352heoxkyi.webp"></p></div>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一个简单的样式测试页面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="blog" scheme="http://blog.danielniu.me/tags/blog/"/>
    
    <category term="markdown" scheme="http://blog.danielniu.me/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Windows 万能下载器 Aira2 懒人配置：</title>
    <link href="http://blog.danielniu.me/2024/03/04/Aira2%20%E6%87%92%E4%BA%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.danielniu.me/2024/03/04/Aira2%20%E6%87%92%E4%BA%BA%E9%85%8D%E7%BD%AE/</id>
    <published>2024-03-04T19:39:12.000Z</published>
    <updated>2024-03-11T08:55:39.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Aria2 是一个命令行全功能下载器，同时支持磁力下载，没有原生界面但是可以使用aira2c以及airaNG的web界面</p></blockquote><span id="more"></span><h1 id="为什么选择-Aria2？"><a href="#为什么选择-Aria2？" class="headerlink" title="为什么选择 Aria2？"></a>为什么选择 Aria2？</h1><p>  Aria2 下载功能比较全面，支持 BT 和磁力链接，性能也相当不错，速度不比迅雷慢。</p><p>虽然没有原生应用界面，配置也比较麻烦，但这些可以通过懒人包轻松解决。</p><h1 id="最快速的懒人配置："><a href="#最快速的懒人配置：" class="headerlink" title="最快速的懒人配置："></a>最快速的懒人配置：</h1><ol><li>下载懒人包： <a href="https://link.zhihu.com/?target=https://www.seoipo.com/software/Aria2/">LINK</a></li><li>将懒人包解压到 想要的文件夹，根据路径配置aria2.conf</li><li>官网下载 Aria2 程序<a href="https://github.com/aria2/aria2/releases">LINK</a>，然后解压到快速设置包的存放文件夹中，整体替代其中的 aria2相关程序和文件。</li><li>点击 <code>Aria2c启动器.exe</code>or<code>AriaNg启动器.exe</code>即可开始下载。两者都仅为前端界面，使用文件中的aria2.exe服务，可同时启动。包内均为开源绿色软件，不涉及任何隐私和安装，AutoHotkey 插件容易被误报。</li></ol><p>Aria2c webui：<code>https://aria2c.com/</code></p><p>AriaNg webui:<code>file:///D:/Program/aria2/AriaNg/index.html#!/downloading</code></p><h1 id="接管浏览器下载"><a href="#接管浏览器下载" class="headerlink" title="接管浏览器下载"></a>接管浏览器下载</h1><p>如果想用 Aria2 接管浏览器的下载管理，需安装插件&#x2F;扩展。</p><h2 id="Chrome："><a href="#Chrome：" class="headerlink" title="Chrome："></a>Chrome：</h2><p>安装 添加到 aria2 扩展。下载包可以用 国内搬运地址，或是懒人包内置文件。<br>如果浏览器无法直接安装 .crx 格式的扩展，可以将文件解压到新文件夹「xxx」，然后在浏览器的地址栏输入 chrome:&#x2F;&#x2F;extensions&#x2F; 开启开发者模式，点击加载已解压的扩展程序，选中刚才解压的文件夹「xxx」。</p><h2 id="Firefox："><a href="#Firefox：" class="headerlink" title="Firefox："></a>Firefox：</h2><p>安装 Aria2 Download Manager Integration 扩展，可参考下方的 Chrome 扩展设置进行配置。</p><p>安装完「添加到 aria2」扩展后，右键扩展图标，点击「选项」&gt;「设置」，设置如下：</p><p>最小监视：10 M，低于该容量将由浏览器下载。如果 Aria2 要接手所有下载，可以将最小监视设为 0.001。<br>JSON-RPC 链接：<a href="http://localhost:6800/jsonrpc%E3%80%82">http://localhost:6800/jsonrpc。</a><br>注意：「添加到 aria2」图标显示的 en 表示处于开启状态，dis 表示处于关闭状态，点击图标可以切换使用状态。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Aria2 是一个命令行全功能下载器，同时支持磁力下载，没有原生界面但是可以使用aira2c以及airaNG的web界面&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="aira2" scheme="http://blog.danielniu.me/tags/aira2/"/>
    
  </entry>
  
  <entry>
    <title>c++ STL 库 （未完成）</title>
    <link href="http://blog.danielniu.me/2024/02/28/c++%20STL%20%E5%BA%93/"/>
    <id>http://blog.danielniu.me/2024/02/28/c++%20STL%20%E5%BA%93/</id>
    <published>2024-02-28T19:56:48.000Z</published>
    <updated>2024-03-11T09:22:07.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>c++ STL 库包含基本的图，列表，栈等数据结构以及基本操作，方便使用。</p></blockquote><span id="more"></span><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://picstorage.danielniu.me/imgs/2.png" alt="结构图"></p><h2 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h2><blockquote><p><strong>内部自动有序 不含重复元素</strong> <strong>容器</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; name;</span><br><span class="line">set&lt;<span class="type">double</span>&gt; name;</span><br><span class="line">set&lt;<span class="type">char</span>&gt; name;</span><br><span class="line">set&lt;<span class="keyword">struct</span> node&gt; name;</span><br><span class="line">set&lt;set&lt;<span class="type">int</span>&gt; &gt; name;<span class="comment">//注意：&gt; &gt;之间要加空格</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; arr[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="set容器内元素的访问"><a href="#set容器内元素的访问" class="headerlink" title="set容器内元素的访问"></a>set容器内元素的访问</h3><p><strong>set只能通过迭代器(iterator)访问(除了vector和string之外的STL容器都不支持*(it+i)的访问方式)</strong> ：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">set&lt;<span class="type">char</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>&gt;::iterator it = st.<span class="built_in">begin</span>(); it != st.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="insert-value"><a href="#insert-value" class="headerlink" title="insert(value)"></a>insert(value)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">insert</span>(<span class="string">&#x27;C&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="find-value"><a href="#find-value" class="headerlink" title="find(value)"></a>find(value)</h4><p><strong>find(value)返回的是set中value所对应的迭代器，也就是value的指针（地址）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; *(st.<span class="built_in">find</span>(<span class="number">2</span>)) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="erase-it"><a href="#erase-it" class="headerlink" title="erase(it)"></a><strong>erase(it)</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">erase</span>(st.<span class="built_in">find</span>(<span class="number">100</span>)); <span class="comment">//利用find()函数找到100,然后用erase删除它</span></span><br></pre></td></tr></table></figure><h4 id="erase-iteratorBegin-iteratorEnd"><a href="#erase-iteratorBegin-iteratorEnd" class="headerlink" title="erase(iteratorBegin , iteratorEnd)"></a><strong>erase(iteratorBegin , iteratorEnd)</strong></h4><p><strong>左闭右开</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.<span class="built_in">erase</span>(it, st.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h4 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; st.<span class="built_in">size</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="vector（矢量）"><a href="#vector（矢量）" class="headerlink" title="vector（矢量）"></a>vector（矢量）</h2><blockquote><p><strong>变长数组</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; name;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt; name;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; name;</span><br><span class="line">vector&lt;<span class="keyword">struct</span> node&gt; name;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; name;<span class="comment">//注意：&gt; &gt;之间要加空格</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; array[SZIE]; <span class="comment">//二维变长数组</span></span><br></pre></td></tr></table></figure><p><strong>二维数组中，它的一维形式就是地址。例如：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">2</span>];<span class="comment">//定义一个3行2列的地址</span></span><br><span class="line">cout&lt;&lt;arr[<span class="number">0</span>]&lt;&lt;endl; <span class="comment">//输出arr第1行的地址</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x61fe00</span> <span class="comment">//arr第1行的地址</span></span><br></pre></td></tr></table></figure><h3 id="vector容器内元素的访问"><a href="#vector容器内元素的访问" class="headerlink" title="vector容器内元素的访问"></a>vector容器内元素的访问</h3><p><strong>（1）通过下标访问</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;vi[<span class="number">0</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p><strong>（2）通过迭代器访问</strong></p><blockquote><p>迭代器（iterator）可以理解为指针</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;类型名&gt;::iterator 变量名;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">vector&lt;<span class="type">double</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;it[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">       cout&lt;&lt;*(it+i)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//vector的迭代器不支持it&lt;v.end()的写法，因此循环条件只能it!=v.end()</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it=v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vector常用函数实例解析"><a href="#vector常用函数实例解析" class="headerlink" title="vector常用函数实例解析"></a>vector常用函数实例解析</h3><h4 id="（1）push-back-item"><a href="#（1）push-back-item" class="headerlink" title="（1）push_back(item)"></a><strong>（1）push_back(item)</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure><h4 id="（2）void-pop-back"><a href="#（2）void-pop-back" class="headerlink" title="（2）void pop_back()"></a><strong>（2）void pop_back()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure><h4 id="（3）size"><a href="#（3）size" class="headerlink" title="（3）size()"></a><strong>（3）size()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h4 id="（4）clear"><a href="#（4）clear" class="headerlink" title="（4）clear()"></a><strong>（4）clear()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h4 id="（5）insert"><a href="#（5）insert" class="headerlink" title="（5）insert()"></a><strong>（5）insert()</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">insert</span>(__position,__x);</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>()+<span class="number">2</span>,<span class="number">-1</span>); <span class="comment">//将-1插入v[2]的位置</span></span><br></pre></td></tr></table></figure><h4 id="（6）erase-左闭右开"><a href="#（6）erase-左闭右开" class="headerlink" title="（6）erase()    左闭右开"></a><strong>（6）erase()    左闭右开</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">erase</span>(__position); <span class="comment">//删除一个元素</span></span><br><span class="line">   v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">erase</span>(__positionBegin,__positionEnd);<span class="comment">//删除一个区间内的元素</span></span><br><span class="line">    v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>()+<span class="number">1</span>,v.<span class="built_in">begin</span>()+<span class="number">4</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;c++ STL 库包含基本的图，列表，栈等数据结构以及基本操作，方便使用。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="http://blog.danielniu.me/tags/cpp/"/>
    
    <category term="stl" scheme="http://blog.danielniu.me/tags/stl/"/>
    
    <category term="algorithm" scheme="http://blog.danielniu.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Verilog running in vscode</title>
    <link href="http://blog.danielniu.me/2023/10/18/verilog-in-vscode/"/>
    <id>http://blog.danielniu.me/2023/10/18/verilog-in-vscode/</id>
    <published>2023-10-18T20:34:39.000Z</published>
    <updated>2024-03-11T08:55:05.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>尝试在vscode跑Verilog，记录一下。<br>很久之前设置的，想到多少写多少吧：</p></blockquote><span id="more"></span><h2 id="一·添加的扩展："><a href="#一·添加的扩展：" class="headerlink" title="一·添加的扩展："></a>一·添加的扩展：</h2><p><img src="https://picstorage.danielniu.me/imgs/bafkreifgtz7lwnpkumdxikltrrfhdwjyrxrjnflovh3k2d7ark62i5r43y.png" alt="image"><br>Verilog HDL：添加一个运行按钮，添加控制台输出（大概）</p><p>Verilog Snippet：关键词高亮补全（大概）</p><p>Verilog_Testbench：自动生成测试文件，用处不大。</p><p>Verilog-HDL&#x2F;SystemVe：主要的，综合各个模块</p><p><img src="https://picstorage.danielniu.me/imgs/bafkreidt2dhxhqj4ilximdpergiswfm6lo4nebos6xwdtw5gvkqatvj2ea.png" alt="image"></p><p>WaveTrace：波形显示</p><h2 id="二·部分设置："><a href="#二·部分设置：" class="headerlink" title="二·部分设置："></a>二·部分设置：</h2><p><code>&quot;verilog.linting.linter&quot;: &quot;iverilog&quot;</code></p><p><img src="https://picstorage.danielniu.me/imgs/bafkreiax4bffeap77a4xrwtvlgycfrktw346uxvuc44xcjrf7womhqqboi.png" alt="image"></p><h2 id="三·报错："><a href="#三·报错：" class="headerlink" title="三·报错："></a>三·报错：</h2><p>1.include 报错：<br>`include “.&#x2F;my.v”找不到文件，使用相对绝对路径都不行：设置为：<br><code>&quot;verilog.linting.iverilog.runAtFileLocation&quot;: true</code><br><img src="https://picstorage.danielniu.me/imgs/bafkreia36fe5f3wrka2dctmhyzffrtlu7o4ormvjqmeqeavrn27q27pvr4.png" alt="1"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;尝试在vscode跑Verilog，记录一下。&lt;br&gt;很久之前设置的，想到多少写多少吧：&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="verilog" scheme="http://blog.danielniu.me/tags/verilog/"/>
    
    <category term="vscode" scheme="http://blog.danielniu.me/tags/vscode/"/>
    
    <category term="环境配置" scheme="http://blog.danielniu.me/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>从C++到python</title>
    <link href="http://blog.danielniu.me/2023/07/01/%E4%BB%8EC-%E5%88%B0python/"/>
    <id>http://blog.danielniu.me/2023/07/01/%E4%BB%8EC-%E5%88%B0python/</id>
    <published>2023-07-01T08:41:25.000Z</published>
    <updated>2024-03-11T08:55:03.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>python的优点是简单易学，库安装简单配置丰富，写法简洁，本文目的即初步认识python的规则化写法。</p></blockquote><span id="more"></span><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><ol><li>进入’<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a>‘ 下载pycharm并安装。</li><li>根据引导安装应用并登录，创建你的第一段python代码。</li></ol><h1 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h1><ul><li>毋庸置疑，py比cpp更简单，写代码形式上亦是如此，大体上差别如下：<ul><li><ol><li>不需要头文件</li></ol></li><li><ol start="2"><li>主函数没有函数名</li></ol></li><li><ol start="3"><li>不需要{}</li></ol></li><li><ol start="4"><li>不需要;</li></ol></li></ul></li></ul><p>接下来，从最简单的输出开始；</p><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>输出函数print()语法就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>输入函数是 input()，功能是接收用户输入的内容，语法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>（输出的内容）</span><br></pre></td></tr></table></figure><p>举例：接收用户输入的密码并打印:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)<span class="comment">#把输入内容赋给n，用 n 接收一下</span></span><br><span class="line"><span class="built_in">print</span>(n)<span class="comment">#打印n</span></span><br></pre></td></tr></table></figure><p>在Python里，“#” 表示注释，“#”后面的东西不会被执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">提示信息</span><br><span class="line">请输入密码：123</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>合法的标识符:大小写字母，数字(不能开头),下划线。</li><li>没有长度限制。<blockquote><p>建议望文生义，函数名、变量名等命名方法各有区分：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 包名：全小写，例如 time ;</span><br><span class="line">2. 类名：每个单词的首字母大写，其他的小写，简称大驼峰命名，例如 HelloWorld ；</span><br><span class="line">3. 变量名/函数名:第一个单词的首字母小写，后面的单词的首字母大写，简称小驼峰命名，例如 helloWorld ；</span><br><span class="line">4. 常量：全大写，例如 HELLO 。</span><br><span class="line">5. 其他命名方式，比如 hello_world 。</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>与c++不同，python不需要类型说明符，在设置时会自行分配。<strong>（不是没有!!!）</strong></p><ol><li>整型</li><li>浮点型</li><li>字符串</li><li>bool类型</li><li>None 是一个单独的数据类型</li><li>列表、元组、字典、集合也是常见的数据类型</li></ol><ul><li>类型转换：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>() <span class="comment">#被转换的必须为全数字的字符串</span></span><br><span class="line"><span class="built_in">str</span>()</span><br><span class="line"><span class="built_in">float</span>() <span class="comment">#被转换的必须为全数字的字符串</span></span><br></pre></td></tr></table></figure></li><li>获取类型信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>() <span class="comment">#返回的是对象的类型</span></span><br><span class="line"><span class="built_in">type</span>().__name__</span><br><span class="line"></span><br><span class="line">sinstance(,)  <span class="comment">#常用来判断数据类型,返回bool</span></span><br></pre></td></tr></table></figure>例子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f).__name__) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(f,<span class="built_in">int</span>))</span><br></pre></td></tr></table></figure>输出：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f).__name__)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(f,<span class="built_in">float</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符可以分为很多4类</p><ol><li><p>一般运算符</p><blockquote><p>+，-，*，&#x2F;（真除法）,&#x2F;&#x2F;（地板除，舍去小数部分）,%（取余数）,**（幂运算）</p></blockquote></li><li><p>赋值运算符</p><blockquote><p>&#x3D;,+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;,%&#x3D;,**&#x3D;<br><br>连续赋值：a&#x3D;b&#x3D;c&#x3D;d&#x3D;10</p></blockquote></li><li><p>布尔运算符</p><blockquote><p>&#x3D;&#x3D; （等于），！&#x3D;（不等于）, &gt;&#x3D; ,&lt;&#x3D; ,&gt;, &lt;</p></blockquote></li></ol><p>4.逻辑运算符</p><blockquote><p>主要有not、and和or三类，又称非、与和或</p><blockquote><p>and：前后都为真则为真<br>or：有一个为真则为真<br>not:非真，非假</p></blockquote></blockquote><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">c = <span class="number">30</span></span><br><span class="line">d = <span class="number">40</span></span><br><span class="line">n1 = a &gt; b <span class="keyword">and</span> a &lt; c    <span class="comment">#a&gt;b为假，a&lt;c为真，假与真为假</span></span><br><span class="line">n2 = <span class="keyword">not</span> a &lt; c   <span class="comment">#a&lt;c为真，非真则为假</span></span><br><span class="line">n3 = a &gt; b <span class="keyword">or</span> a &lt; c     <span class="comment">#a&gt;b为假，a&lt;c为真，假或真为真</span></span><br><span class="line"><span class="built_in">print</span>(n1,n2,n3)</span><br></pre></td></tr></table></figure><p>输出;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">False</span> <span class="literal">False</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="条件分支-if-elif-else"><a href="#条件分支-if-elif-else" class="headerlink" title="条件分支 (if  elif  else)"></a>条件分支 (if  elif  else)</h2><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入分数:&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="number">80</span> &gt;= s &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">80</span> &lt; s &lt;= <span class="number">90</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;优秀&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt; s &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非常优秀&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不及格&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> s &gt; <span class="number">50</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你的分数在60分左右&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你的分数低于50分&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入分数:55</span><br><span class="line">不及格</span><br><span class="line">你的分数在60分左右</span><br></pre></td></tr></table></figure><h2 id="循环流程"><a href="#循环流程" class="headerlink" title="循环流程"></a>循环流程</h2><ol><li>while循环</li></ol><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 布尔表达式: </span><br><span class="line">代码块</span><br></pre></td></tr></table></figure><p>只要条件(布尔表达式)为真就执行里面的代码块。</p><p>举例：比如说输入一个整数并计算各个位和，例如输入321，那么各个位之和则为6。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请输入一个整数，并计算各个位和 如：321=6</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个整数:&quot;</span>))  <span class="comment"># 将字符串转为整型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sums累加器：m=10 m=10+5</span></span><br><span class="line"></span><br><span class="line">sums = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n != <span class="number">0</span>:  <span class="comment"># 32 #3</span></span><br><span class="line">    sums = sums + n % <span class="number">10</span>  <span class="comment"># sums=1+2=3+3=6</span></span><br><span class="line">    n = n // <span class="number">10</span>  <span class="comment"># 32</span></span><br><span class="line"><span class="built_in">print</span>(sums)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一个整数:2345</span><br><span class="line">14</span><br></pre></td></tr></table></figure><ol start="2"><li>for循环</li></ol><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 可迭代对象:</span><br><span class="line">代码块</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l=[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> l:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ol start="3"><li>range</li></ol><p>for循环经常会搭配range来使用，range是一个可迭代对象，range的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(start=<span class="number">0</span>,stop,step=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p> Range对象返回一个对象，该对象按步生成从开始(包含)到结束(排除)的整数序列。Range (i, j)产生i, i+1, i+2，…j - 1。Start默认为0,stop省略!<br><br> Range(4)产生0,1,2,3。这些正是包含4个元素的列表的有效索引。<br><br> 当给出step时，它指定增量(或减量)。</p><ol start="4"><li>continue  break</li></ol><p>continue跳过本次循环，后面的循环继续执行<br><br>break终止循环</p><h1 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h1><p>列表是可以<strong>同时</strong>存放任何数据，包括整型，浮点型，字符串，布尔型等等，是常用的数据类型之一。</p><h2 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">列表也是一个可迭代对象</span><br><span class="line">1. 普通形式</span><br><span class="line">        l = [1,2,3,4,5] ---整型列表</span><br><span class="line">        l = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;] ---字符串列表</span><br><span class="line">        l = [True,False,1&gt;2,5&lt;6]---布尔列表</span><br><span class="line">2. 混合列表</span><br><span class="line">l = [1,2.5,&quot;a&quot;,True]</span><br><span class="line">3. 空列表</span><br><span class="line">l = []</span><br></pre></td></tr></table></figure><h2 id="从列表中获取数据"><a href="#从列表中获取数据" class="headerlink" title="从列表中获取数据"></a>从列表中获取数据</h2><p>列表是有下标的，并且下标从0开始，获取方法类似数组<br><br><strong>但是列表的下标正序从0开始，倒叙从-1开始</strong><br></p><blockquote><p>print(List)顺序输出整个列表</p></blockquote><h2 id="列表中数据交换"><a href="#列表中数据交换" class="headerlink" title="列表中数据交换"></a>列表中数据交换</h2><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># 下标/索引：0开始</span></span><br><span class="line">l[<span class="number">2</span>], l[<span class="number">3</span>] = l[<span class="number">3</span>], l[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h2 id="向列表添加元素"><a href="#向列表添加元素" class="headerlink" title="向列表添加元素"></a>向列表添加元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">append(project) <span class="comment">#列表尾插对象（作为整体）</span></span><br><span class="line">extend(project) <span class="comment">#列表尾插可迭代对象 eg：两列表相连接</span></span><br><span class="line">insert(num,project) <span class="comment">#指定下标位置添加对象（作为整体）</span></span><br></pre></td></tr></table></figure><h2 id="列表删除元素"><a href="#列表删除元素" class="headerlink" title="列表删除元素"></a>列表删除元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">clear()<span class="comment">#清空列表（列表还在，没被删除）</span></span><br><span class="line">pop()<span class="comment">#删除下标指定的元素，如果不加下标则删除最后一个元素</span></span><br><span class="line">remove()<span class="comment">#删除（正序第一个）指定的对象</span></span><br><span class="line"><span class="keyword">del</span>()<span class="comment">#删除变量(整个列表)或列表指定下标元素的值（补位）</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">l2=[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">l.extend(l2)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.append(l2)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.insert(<span class="number">3</span>,l2)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.remove(l2)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="keyword">del</span> l[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="keyword">del</span> l</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l2)</span><br><span class="line">l2.clear()</span><br><span class="line"><span class="built_in">print</span>(l2)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>], <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]]</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">[<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h2 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h2><p>同数组。</p><h2 id="列表高级特性"><a href="#列表高级特性" class="headerlink" title="列表高级特性"></a>列表高级特性</h2><h3 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h3><p>切片，顾名思义就是把1个列表切分为多个列表，语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量[起始下标:结束下标] #结束下标取不到</span><br></pre></td></tr></table></figure><p>做切片操作时要注意以下几个点：</p><blockquote><ol><li>如果下标从0开始可以省略不写，例如 n &#x3D; l[:4]。</li><li>如果结束下标取的是最后一个元素，可以省略不写，例如 n &#x3D; l[3:]。</li><li>如果列表中的元素都要，开始和结束下标都可以省略，例如 n &#x3D; l[:]。</li><li>n &#x3D; l[:-1] 表示从0开始 - 到数二个元素。<br>例子：</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure><h3 id="等距抽取"><a href="#等距抽取" class="headerlink" title="等距抽取"></a>等距抽取</h3><p>方法是 n &#x3D; l[开始:结束:步长] ，这个方法既可以正向去操作列表，也可以反向去操作列表,例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">n = l[-<span class="number">1</span>:-<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[5, 4]</span><br></pre></td></tr></table></figure><h2 id="列表的一些操作符"><a href="#列表的一些操作符" class="headerlink" title="列表的一些操作符"></a>列表的一些操作符</h2><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>列表之间进行比较，以相同下标进行比较，从小到大进行比较，如果值相同则比较下一组元素，如果不同直接出结果，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]  <span class="comment"># 下标/索引：0开始</span></span><br><span class="line">l2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(l &lt; l2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符and not or 跟比较运算符相似，返回结果都是布尔值（True&#x2F;False）</p><h3 id="拼接运算符"><a href="#拼接运算符" class="headerlink" title="拼接运算符"></a>拼接运算符</h3><p>拼接运算符是 + ，常用来进行两个列表拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]  <span class="comment"># 下标/索引：0开始</span></span><br><span class="line">l2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(l + l2)</span><br></pre></td></tr></table></figure><h3 id="重复操作符"><a href="#重复操作符" class="headerlink" title="重复操作符"></a>重复操作符</h3><p>重复操作符为 * ，后面常跟数字，表示将列表里面的元素重复复制几遍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(l2*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="成员关系操作符"><a href="#成员关系操作符" class="headerlink" title="成员关系操作符"></a>成员关系操作符</h3><p>成员关系操作符主要有 in和not in，用来判断元素是否在列表中，返回结果是布尔值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span> <span class="keyword">not</span> <span class="keyword">in</span> l)<span class="comment">#输出“5不在列表l中”这句话的真假</span></span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="列表的其他方法"><a href="#列表的其他方法" class="headerlink" title="列表的其他方法"></a>列表的其他方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">copy()<span class="comment">#浅拷贝</span></span><br><span class="line">count(project)<span class="comment">#返回对象在列表中出现的次数</span></span><br><span class="line">index(value,开始下标,结束下标)<span class="comment">#元素出现的第一次下标位置，也可自定义范围</span></span><br><span class="line">reverse()<span class="comment">#原地翻转</span></span><br><span class="line">sort (key=<span class="literal">None</span> reverse=<span class="literal">False</span>)<span class="comment">#快速排序，默认从小到大排序，key:算法</span></span><br><span class="line"><span class="built_in">len</span>()<span class="comment">#获取列表长度</span></span><br></pre></td></tr></table></figure><h3 id="二维列表"><a href="#二维列表" class="headerlink" title="二维列表"></a>二维列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量[外层列表下标][内层列表的下标]</span></span><br><span class="line">l = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(j)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h1 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h1><h2 id="元组的创建及访问"><a href="#元组的创建及访问" class="headerlink" title="元组的创建及访问"></a>元组的创建及访问</h2><blockquote><p>元组用（）的形式，是可迭代对象，是有序的，下标操作,支持切面操作 [:]<br><br>同列表，不再赘述。</p></blockquote><h2 id="修改和删除"><a href="#修改和删除" class="headerlink" title="修改和删除"></a>修改和删除</h2><p>元组是不可变类型，不能修改，但是可以通过将元组转换成列表的形式进行修改和删除等操作，最后再将列表转换成元组，完成元组的修改和删除。<br><br>例如：修改元组中的元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">l = <span class="built_in">list</span>(t) <span class="comment">#将元组转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment">#输出列表</span></span><br><span class="line">l[<span class="number">2</span>] = <span class="number">6</span>    <span class="comment">#列表指定元素的修改</span></span><br><span class="line"><span class="built_in">print</span>(l)    <span class="comment">#输出新列表</span></span><br><span class="line">t = <span class="built_in">tuple</span>(l)    <span class="comment">#列表转换成元组</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">[1, 2, 6, 4, 5]</span><br><span class="line">(1, 2, 6, 4, 5)</span><br></pre></td></tr></table></figure><h2 id="元组的操作符"><a href="#元组的操作符" class="headerlink" title="元组的操作符"></a>元组的操作符</h2><p>元组同样也有着操作符，方法跟列表的操作符是一样的,不再赘述。</p><h2 id="元组的方法"><a href="#元组的方法" class="headerlink" title="元组的方法"></a>元组的方法</h2><p>对其操作先转换成列表再行操作，不再赘述。<br><br>另外有两种方法新增：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> count(value)</span><br><span class="line"><span class="comment">#统计某个值出现的次数，value是指定的值</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> index(value,[start],[stop])</span><br><span class="line"><span class="comment">#返回value在元组中(start到stop间)出现的下标位置（第一次出现的下标）</span></span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>在Python中，字符和字符串没有区别。可用&#39;    &#39;也可以是” “</p><h2 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 字符串不可变类型</span><br><span class="line"><span class="number">2.</span> 字符串是可迭代对象</span><br><span class="line"><span class="number">3.</span> 字符串支持索引和切片操作</span><br><span class="line"><span class="number">4.</span> 支持操作符;</span><br><span class="line">拼接：+</span><br><span class="line">重复操作符：*</span><br><span class="line">比较运算符： &gt; &lt; &lt;= &gt;= == !=</span><br><span class="line">逻辑运算符：<span class="keyword">not</span> <span class="keyword">and</span> <span class="keyword">or</span></span><br><span class="line">成员关系： <span class="keyword">in</span>    <span class="keyword">not</span> <span class="keyword">in</span></span><br></pre></td></tr></table></figure><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">capitalize()<span class="comment">#把字符串的第一个字符改为大写，后面的小写</span></span><br><span class="line">casefold()<span class="comment">#把整个字符串都小写</span></span><br><span class="line">encode()<span class="comment">#编码 str--bytes (二进制字符串)</span></span><br><span class="line">decode()<span class="comment">#解码</span></span><br><span class="line">count(sub,start, stop)<span class="comment">#返回字符(sub)出现的次数，star: 开始下标，stop:结束下标</span></span><br><span class="line">find(sub,start,stop)<span class="comment"># 返回sub第一次出现的下标,查不到返回-1</span></span><br><span class="line">index(sub, start, stop)<span class="comment">#返回sub第一次出现的下标，查不到报错</span></span><br><span class="line">upper()<span class="comment">#将字符串转为大写</span></span><br><span class="line">1ower()<span class="comment">#将字符串转为小写</span></span><br></pre></td></tr></table></figure><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><ol><li>format 语法1：用数字占位（下标）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&#123;0&#125; 嘿嘿&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">s = <span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125; 嘿嘿&quot;</span></span><br><span class="line">s2 = s.<span class="built_in">format</span>(a, <span class="string">&quot;JAVA&quot;</span>, <span class="string">&quot;C++&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure>2.format 语法2：{} 占位<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">s = <span class="string">&quot;&#123;&#125;&#123;&#125;&#123;&#125; 嘿嘿&quot;</span></span><br><span class="line">s2 = s.<span class="built_in">format</span>(a, <span class="string">&quot;JAVA&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;C# &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment">#Output</span></span><br><span class="line">100JAVAC++ 嘿嘿</span><br></pre></td></tr></table></figure>3.format 语法3：{} 占位用字母占位<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;&#123;a&#125;&#123;b&#125;&#123;c&#125; 嘿嘿&quot;</span></span><br><span class="line">s2 = s.<span class="built_in">format</span>(b=<span class="string">&quot;JAVA&quot;</span>, a=<span class="string">&quot;C++&quot;</span>, c=<span class="string">&quot;C# &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment">#Output:</span></span><br><span class="line">C++JAVAC<span class="comment">#  嘿嘿</span></span><br></pre></td></tr></table></figure>s.format(s2)可理解为使用s格式化s2</li></ol><p>4.%s</p><p>语法为 “%s”%（值） ，最常用的参数可以是任意值。<br>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s * %s = %s&quot;</span> % (i, j, i * j), end=<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Output:</span></span><br><span class="line"><span class="number">1</span> * <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="number">2</span> * <span class="number">1</span> = <span class="number">2</span><span class="number">2</span> * <span class="number">2</span> = <span class="number">4</span></span><br><span class="line"><span class="number">3</span> * <span class="number">1</span> = <span class="number">3</span><span class="number">3</span> * <span class="number">2</span> = <span class="number">6</span><span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span></span><br><span class="line"><span class="number">4</span> * <span class="number">1</span> = <span class="number">4</span><span class="number">4</span> * <span class="number">2</span> = <span class="number">8</span><span class="number">4</span> * <span class="number">3</span> = <span class="number">12</span><span class="number">4</span> * <span class="number">4</span> = <span class="number">16</span></span><br><span class="line"><span class="number">5</span> * <span class="number">1</span> = <span class="number">5</span><span class="number">5</span> * <span class="number">2</span> = <span class="number">10</span><span class="number">5</span> * <span class="number">3</span> = <span class="number">15</span><span class="number">5</span> * <span class="number">4</span> = <span class="number">20</span><span class="number">5</span> * <span class="number">5</span> = <span class="number">25</span></span><br><span class="line"><span class="number">6</span> * <span class="number">1</span> = <span class="number">6</span><span class="number">6</span> * <span class="number">2</span> = <span class="number">12</span><span class="number">6</span> * <span class="number">3</span> = <span class="number">18</span><span class="number">6</span> * <span class="number">4</span> = <span class="number">24</span><span class="number">6</span> * <span class="number">5</span> = <span class="number">30</span><span class="number">6</span> * <span class="number">6</span> = <span class="number">36</span></span><br><span class="line"><span class="number">7</span> * <span class="number">1</span> = <span class="number">7</span><span class="number">7</span> * <span class="number">2</span> = <span class="number">14</span><span class="number">7</span> * <span class="number">3</span> = <span class="number">21</span><span class="number">7</span> * <span class="number">4</span> = <span class="number">28</span><span class="number">7</span> * <span class="number">5</span> = <span class="number">35</span><span class="number">7</span> * <span class="number">6</span> = <span class="number">42</span><span class="number">7</span> * <span class="number">7</span> = <span class="number">49</span></span><br><span class="line"><span class="number">8</span> * <span class="number">1</span> = <span class="number">8</span><span class="number">8</span> * <span class="number">2</span> = <span class="number">16</span><span class="number">8</span> * <span class="number">3</span> = <span class="number">24</span><span class="number">8</span> * <span class="number">4</span> = <span class="number">32</span><span class="number">8</span> * <span class="number">5</span> = <span class="number">40</span><span class="number">8</span> * <span class="number">6</span> = <span class="number">48</span><span class="number">8</span> * <span class="number">7</span> = <span class="number">56</span><span class="number">8</span> * <span class="number">8</span> = <span class="number">64</span></span><br><span class="line"><span class="number">9</span> * <span class="number">1</span> = <span class="number">9</span><span class="number">9</span> * <span class="number">2</span> = <span class="number">18</span><span class="number">9</span> * <span class="number">3</span> = <span class="number">27</span><span class="number">9</span> * <span class="number">4</span> = <span class="number">36</span><span class="number">9</span> * <span class="number">5</span> = <span class="number">45</span><span class="number">9</span> * <span class="number">6</span> = <span class="number">54</span><span class="number">9</span> * <span class="number">7</span> = <span class="number">63</span><span class="number">9</span> * <span class="number">8</span> = <span class="number">72</span><span class="number">9</span> * <span class="number">9</span> = <span class="number">81</span></span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. “\n” ：换行符</span><br><span class="line">2. “\&#x27;”:单引号</span><br><span class="line">3. “\“”:双引号</span><br><span class="line">4. &quot;\\&quot; : \</span><br></pre></td></tr></table></figure><p>在这里值得注意的是 \ ，它有很多比较巧的运用，<strong>比如可以实现代码换行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;sxsxsxsxsxsxsxs\</span></span><br><span class="line"><span class="string">        xsxsxsxs\</span></span><br><span class="line"><span class="string">        xsx&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> \</span><br><span class="line">    + <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Output:</span></span><br><span class="line">sxsxsxsxsxsxsxs        xsxsxsxs        xsx</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h1><p>字典是用来存储数据的，字典中的数据以映射关系存储。</p><h2 id="字典的特点"><a href="#字典的特点" class="headerlink" title="字典的特点"></a>字典的特点</h2><blockquote><ol><li>字典是Python中唯一的映射类型<ol start="2"><li>字典是无序的</li><li>字典是可迭代对象</li><li>字典的构成:<br><br> 键：key<br> 值：value<br> 映射：键映射值<br> 键-值：键值对，又叫 项</li></ol></li></ol></blockquote><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 直接创建</span><br><span class="line">语法： d = &#123;&#125; #空字典</span><br><span class="line">例如： d = &#123;&quot;name&quot;:&quot;不良人&quot;,&quot;apple&quot;:&quot;苹果&quot;&#125;</span><br><span class="line">2. dict()</span><br><span class="line">例如：d = dict()#空字典</span><br><span class="line">3. dict(可迭代对象)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d3 = <span class="built_in">dict</span>([(<span class="string">&quot;one&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;two&quot;</span>,<span class="number">2</span>)])</span><br><span class="line"><span class="built_in">print</span>(d3)</span><br><span class="line"><span class="comment">#Output：</span></span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>这就是一个元组，one是键，1是值， ‘one’ : 1 是键值对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4. dict(**kwargs)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d4 = <span class="built_in">dict</span>(a=<span class="number">3</span>, b=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(d4)</span><br><span class="line"><span class="comment">#Output:</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">4</span>&#125;    </span><br></pre></td></tr></table></figure><h2 id="字典访问"><a href="#字典访问" class="headerlink" title="字典访问"></a>字典访问</h2><ol><li>基本形式：<br><br> 变量名[键名] #键所对应的值</li><li>添加一个键值对<br><br> 变量名[键名]&#x3D;值</li><li>修改一个键值对的值<br><br> 变量名[键名]&#x3D;值</li></ol><p>Example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;小黑&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="comment">#Output:</span></span><br><span class="line">小黑</span><br></pre></td></tr></table></figure><h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;python的优点是简单易学，库安装简单配置丰富，写法简洁，本文目的即初步认识python的规则化写法。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="http://blog.danielniu.me/tags/cpp/"/>
    
    <category term="python" scheme="http://blog.danielniu.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Google服务异常耗电解决办法</title>
    <link href="http://blog.danielniu.me/2023/06/30/Google%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E8%80%97%E7%94%B5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://blog.danielniu.me/2023/06/30/Google%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E8%80%97%E7%94%B5%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2023-06-30T08:46:00.000Z</published>
    <updated>2024-03-11T08:54:57.298Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>推荐root+gms doze.<br>gms doze 卸载删不干净，还需要更改install.sh才能删除干净。<br>gms doze 不工作则可能是系统或模块版本过低</p></blockquote><span id="more"></span><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>国内网状态下ping google服务器疯狂404并重试，导致占用率极大，手机温度达到温控阈值。</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>1.gms doze（推荐）<br><a href="https://github.com/Magisk-Modules-Alt-Repo/GMSDoze">https://github.com/Magisk-Modules-Alt-Repo/GMSDoze</a> </p><blockquote><p>如果设备系统相同（lmi a13 pixel experience plus-2023-5-12），推荐使用，刷好后续航大幅度提升，配合scene的应用偏见功能完全可以将功耗发热降低至优于国内rom的水平</p></blockquote><p>2.黑域动态gms:</p><blockquote><p>有弹窗无法取消，并且root开机无法自启动，开发者给的答复是<br>1.屏蔽弹窗消息不会支持。<br>2.root不是主要支持，所以不会修。</p></blockquote><p>3.universal gms doze：<br><a href="https://github.com/gloeyisk/universal-gms-doze">https://github.com/gloeyisk/universal-gms-doze</a> </p><blockquote><p>在我的设备（lmi a13 pixel experience plus-2023-5-12）不起作用</p></blockquote><h2 id="warning！"><a href="#warning！" class="headerlink" title="warning！"></a>warning！</h2><p>模块由magisk刷入，所以能否卸载干净以及对设备的危害暂不知道！！！（底下的有人提出过相关issue，但是作者并未作答）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;推荐root+gms doze.&lt;br&gt;gms doze 卸载删不干净，还需要更改install.sh才能删除干净。&lt;br&gt;gms doze 不工作则可能是系统或模块版本过低&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="刷机" scheme="http://blog.danielniu.me/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
</feed>
